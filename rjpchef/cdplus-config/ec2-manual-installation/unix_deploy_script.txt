#!/bin/bash
#
# deploy     This shell script takes care of deploying to and starting and stopping Tomcat

SERVER_HOME=/usr/share/apache-tomcat-7.0.47
SERVER_PORT=9085
APP_PACKAGE=petclinic

REPO_URL=http://localhost:8081/nexus
REPO_ID=snapshots
GROUP_ID=org.springframework.samples
ARTIFACT_ID=spring-petclinic
VERSION=LATEST

TOMCAT_USER=root
TOMCAT_HOME=$SERVER_HOME
SHUTDOWN_WAIT=45


usage()
{
    echo "Invalid Params"
}

tomcat_pid() {
    echo `ps aux | grep org.apache.catalina.startup.Bootstrap | grep -v grep | awk '{ print $2 }'`
}
 
start() {
    pid=$(tomcat_pid)
    if [ -n "$pid" ]
    then
        echo "Tomcat is already running (pid: $pid)"
    else
        # Start tomcat
        echo "Starting tomcat"
        cd $TOMCAT_HOME/bin
	sh $TOMCAT_HOME/bin/startup.sh
    fi
    return 0
}
 
stop() {
    pid=$(tomcat_pid)
    if [ -n "$pid" ]
    then
        echo "Stoping Tomcat"
        cd $TOMCAT_HOME/bin
	sh $TOMCAT_HOME/bin/shutdown.sh
 
    let kwait=$SHUTDOWN_WAIT
    count=0
    count_by=5
    until [ `ps -p $pid | grep -c $pid` = '0' ] || [ $count -gt $kwait ]
    do
        echo "Waiting for processes to exit. Timeout before we kill the pid: ${count}/${kwait}"
        sleep $count_by
        let count=$count+$count_by;
    done
 
    if [ $count -gt $kwait ]; then
        echo "Killing processes which didn't stop after $SHUTDOWN_WAIT seconds"
        kill -9 $pid
    fi
    else
        echo "Tomcat is not running"
    fi
 
    return 0
}

while [ "$1" != "" ]; do
    case $1 in
	-h | --serverHome )     shift
                                SERVER_HOME="$1"
                                ;;
	-p | --serverPort )     shift
                                SERVER_PORT="$1"
                                ;;
        -r | --repoId )         shift
                                REPO_ID="$1"
                                ;;
	-u | --repoUrl )        shift
                                REPO_URL="$1"
                                ;;
        -g | --groupId )	shift
                                GROUP_ID="$1"
                                ;;
        -a | --artifactId )     shift
                                ARTIFACT_ID="$1"
                                ;;
	-v | --version )        shift
                                VERSION="$1"
                                ;;
	-n | --packageName )    shift
                                APP_PACKAGE="$1"
                                ;;
        * )                     usage
                                exit 1
    esac
    shift
done

export CATALINA_HOME=$SERVER_HOME
stop

groupid_arr=$(echo "$GROUP_ID" | tr ":" "\n")
artifactid_str=$(echo "$ARTIFACT_ID" | tr ":" "\n")
apppackage_str=$(echo "$APP_PACKAGE" | tr ":" "\n")

declare -a artifactid_arr
declare -a apppackage_arr
artifactid_arr=(${artifactid_str})
apppackage_arr=(${apppackage_str})

cnt=0
for groupid in $groupid_arr
do
artifactid="${artifactid_arr[cnt]}"
apppackage="${apppackage_arr[cnt]}"
ARTIFACT_URL="$REPO_URL?r=$REPO_ID&g=$groupid&a=$artifactid&p=war&v=$VERSION"
echo $ARTIFACT_URL
 
echo Cleaning up package $apppackage....
cd $SERVER_HOME
sudo rm -rf work
cd $SERVER_HOME/webapps
sudo rm -rf $apppackage
sudo rm -rf $apppackage.war
echo Clean up complete

echo Downloading artifact $apppackage.war...
sudo wget $ARTIFACT_URL -nv -O $apppackage.tmp
echo Renaming artifact to $apppackage.war
mv $apppackage.tmp $apppackage.war
cnt=$cnt+1
done
 
start
exit 0
